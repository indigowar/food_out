services:
  orders:
    container_name: orders
    restart: unless-stopped
    build:
      context: ../services/orders
    networks:
      - order-network
      - proxy-network
      - kafka-network
    depends_on:
      - orders_db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orders.rule=Host(`orders.localhost`)"
      - "traefik.http.services.orders.loadbalancer.server.port=80"
    environment:
      SECURITY_KEY: ${AUTH_SECURITY_KEY}

      POSTGRES_HOST: orders_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${ORDERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDERS_POSTGRES_DB}

      KAFKA_HOST: 'kafka:9092'
      KAFKA_GROUP: orders
      KAFKA_TOPIC_ORDER_ENDED: order_ended
      KAFKA_TOPIC_ACCEPT_ORDER: accept_order
      KAFKA_TOPIC_COOKING_STARTED: cooking_started
      KAFKA_TOPIC_CREATE_ORDER: create_order
      KAFKA_TOPIC_DELIVERY_STARTED: delivery_started
      KAFKA_TOPIC_DELIVERY_COMPLETED: delivery_completed
      KAFKA_TOPIC_ORDER_PAYED: order_payed
      KAFKA_TOPIC_TAKE_ORDER: take_order
      KAFKA_TOPIC_CANCEL_ORDER: cancel_order

  orders_db:
    container_name: orders_db
    image: postgres:15-alpine
    restart: unless-stopped
    networks:
      - order-network
    volumes:
      - orders_db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${ORDERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDERS_POSTGRES_DB}

networks:
  order-network:

volumes:
  orders_db:
