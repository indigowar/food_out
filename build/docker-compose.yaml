version: '3'

services:
  traefik:
    container_name: traefik
    image: traefik:v2.11
    restart: unless-stopped
    privileged: true
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.network=proxy-network"
      - "--entrypoints.web.address=:80"
    ports:
      - 80:80
    networks:
      - traefik-proxy-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  accounts:
    container_name: accounts_service
    build:
      context: ../services/accounts
      dockerfile: ./build/Dockerfile
    restart: unless-stopped
    networks:
      - traefik-proxy-network
      - accounts-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.accounts.rule=Host(`accounts.localhost`)"
      - "traefik.http.services.accounts.loadbalancer.server.port=80"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: strong_and_complicated_password
      POSTGRES_DB: accounts
      POSTGRES_HOST: accounts_db
      POSTGRES_PORT: 5432

  accounts_database:
    container_name: account_db
    image: postgres:15-alpine
    restart: unless-stopped
    networks:
      - accounts-network
    volumes:
      - ../.volumes/accounts_db:/var/lib/postgresql/data:Z
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: strong_and_complicated_password
      POSTGRES_DB: accounts

networks:
  traefik-proxy-network:
    name: proxy-network
  accounts-network:
    name: accounts-network
