// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// RetrieveDishByID implements RetrieveDishByID operation.
	//
	// Retrieve dish by its ID.
	//
	// GET /dish/{id}
	RetrieveDishByID(ctx context.Context, params RetrieveDishByIDParams) (RetrieveDishByIDRes, error)
	// RetrieveDishesByMenuId implements RetrieveDishesByMenuId operation.
	//
	// Retrieve dishes by its menu ID.
	//
	// GET /dish/menu/{id}
	RetrieveDishesByMenuId(ctx context.Context, params RetrieveDishesByMenuIdParams) (RetrieveDishesByMenuIdRes, error)
	// RetrieveListOfRestaurants implements RetrieveListOfRestaurants operation.
	//
	// Retrieve list of IDs of restaurants.
	//
	// GET /restaurant
	RetrieveListOfRestaurants(ctx context.Context) (RetrieveListOfRestaurantsRes, error)
	// RetrieveMenuByID implements RetrieveMenuByID operation.
	//
	// Retrieve menu data by its ID.
	//
	// GET /menu/{id}
	RetrieveMenuByID(ctx context.Context, params RetrieveMenuByIDParams) (RetrieveMenuByIDRes, error)
	// RetrieveMenusByRestaurant implements RetrieveMenusByRestaurant operation.
	//
	// Retrieve menu data by its restaurant's ID.
	//
	// GET /menu/restaurant/{id}
	RetrieveMenusByRestaurant(ctx context.Context, params RetrieveMenusByRestaurantParams) (RetrieveMenusByRestaurantRes, error)
	// ValidateRestaurantDishes implements ValidateRestaurantDishes operation.
	//
	// Validates restaurant ownership for dishes.
	//
	// POST /restaurant/validate-dishes
	ValidateRestaurantDishes(ctx context.Context, req *ValidationList) (ValidateRestaurantDishesRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
