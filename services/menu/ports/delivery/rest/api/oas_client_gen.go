// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// RetrieveDishByID invokes RetrieveDishByID operation.
	//
	// Retrieve dish by its ID.
	//
	// GET /dish/{id}
	RetrieveDishByID(ctx context.Context, params RetrieveDishByIDParams) (RetrieveDishByIDRes, error)
	// RetrieveListOfRestaurants invokes RetrieveListOfRestaurants operation.
	//
	// Retrieve list of IDs of restaurants.
	//
	// GET /restaurant
	RetrieveListOfRestaurants(ctx context.Context) (RetrieveListOfRestaurantsRes, error)
	// RetrieveMenuByID invokes RetrieveMenuByID operation.
	//
	// Retrieve menu data by its ID.
	//
	// GET /menu/{id}
	RetrieveMenuByID(ctx context.Context, params RetrieveMenuByIDParams) (RetrieveMenuByIDRes, error)
	// RetrieveMenusByRestaurant invokes RetrieveMenusByRestaurant operation.
	//
	// Retrieve menu data by its restaurant's ID.
	//
	// GET /menu/restaurant/{id}
	RetrieveMenusByRestaurant(ctx context.Context, params RetrieveMenusByRestaurantParams) (RetrieveMenusByRestaurantRes, error)
	// ValidateRestaurantDishes invokes ValidateRestaurantDishes operation.
	//
	// Validates restaurant ownership for dishes.
	//
	// POST /restaurant/validate-dishes
	ValidateRestaurantDishes(ctx context.Context, request *ValidationList) (ValidateRestaurantDishesRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// RetrieveDishByID invokes RetrieveDishByID operation.
//
// Retrieve dish by its ID.
//
// GET /dish/{id}
func (c *Client) RetrieveDishByID(ctx context.Context, params RetrieveDishByIDParams) (RetrieveDishByIDRes, error) {
	res, err := c.sendRetrieveDishByID(ctx, params)
	return res, err
}

func (c *Client) sendRetrieveDishByID(ctx context.Context, params RetrieveDishByIDParams) (res RetrieveDishByIDRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("RetrieveDishByID"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/dish/{id}"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "RetrieveDishByID",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/dish/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeRetrieveDishByIDResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RetrieveListOfRestaurants invokes RetrieveListOfRestaurants operation.
//
// Retrieve list of IDs of restaurants.
//
// GET /restaurant
func (c *Client) RetrieveListOfRestaurants(ctx context.Context) (RetrieveListOfRestaurantsRes, error) {
	res, err := c.sendRetrieveListOfRestaurants(ctx)
	return res, err
}

func (c *Client) sendRetrieveListOfRestaurants(ctx context.Context) (res RetrieveListOfRestaurantsRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("RetrieveListOfRestaurants"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/restaurant"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "RetrieveListOfRestaurants",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/restaurant"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeRetrieveListOfRestaurantsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RetrieveMenuByID invokes RetrieveMenuByID operation.
//
// Retrieve menu data by its ID.
//
// GET /menu/{id}
func (c *Client) RetrieveMenuByID(ctx context.Context, params RetrieveMenuByIDParams) (RetrieveMenuByIDRes, error) {
	res, err := c.sendRetrieveMenuByID(ctx, params)
	return res, err
}

func (c *Client) sendRetrieveMenuByID(ctx context.Context, params RetrieveMenuByIDParams) (res RetrieveMenuByIDRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("RetrieveMenuByID"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/menu/{id}"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "RetrieveMenuByID",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/menu/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeRetrieveMenuByIDResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RetrieveMenusByRestaurant invokes RetrieveMenusByRestaurant operation.
//
// Retrieve menu data by its restaurant's ID.
//
// GET /menu/restaurant/{id}
func (c *Client) RetrieveMenusByRestaurant(ctx context.Context, params RetrieveMenusByRestaurantParams) (RetrieveMenusByRestaurantRes, error) {
	res, err := c.sendRetrieveMenusByRestaurant(ctx, params)
	return res, err
}

func (c *Client) sendRetrieveMenusByRestaurant(ctx context.Context, params RetrieveMenusByRestaurantParams) (res RetrieveMenusByRestaurantRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("RetrieveMenusByRestaurant"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/menu/restaurant/{id}"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "RetrieveMenusByRestaurant",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/menu/restaurant/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeRetrieveMenusByRestaurantResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ValidateRestaurantDishes invokes ValidateRestaurantDishes operation.
//
// Validates restaurant ownership for dishes.
//
// POST /restaurant/validate-dishes
func (c *Client) ValidateRestaurantDishes(ctx context.Context, request *ValidationList) (ValidateRestaurantDishesRes, error) {
	res, err := c.sendValidateRestaurantDishes(ctx, request)
	return res, err
}

func (c *Client) sendValidateRestaurantDishes(ctx context.Context, request *ValidationList) (res ValidateRestaurantDishesRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("ValidateRestaurantDishes"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/restaurant/validate-dishes"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "ValidateRestaurantDishes",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/restaurant/validate-dishes"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeValidateRestaurantDishesRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeValidateRestaurantDishesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
