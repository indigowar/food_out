// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package queries

import (
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that DishOwnershipCheckerMock does implement DishOwnershipChecker.
// If this is not the case, regenerate this file with moq.
var _ DishOwnershipChecker = &DishOwnershipCheckerMock{}

// DishOwnershipCheckerMock is a mock implementation of DishOwnershipChecker.
//
//	func TestSomethingThatUsesDishOwnershipChecker(t *testing.T) {
//
//		// make and configure a mocked DishOwnershipChecker
//		mockedDishOwnershipChecker := &DishOwnershipCheckerMock{
//			CheckFunc: func(ctx context.Context, restaurantId uuid.UUID, dishes []uuid.UUID) (bool, error) {
//				panic("mock out the Check method")
//			},
//		}
//
//		// use mockedDishOwnershipChecker in code that requires DishOwnershipChecker
//		// and then make assertions.
//
//	}
type DishOwnershipCheckerMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(ctx context.Context, restaurantId uuid.UUID, dishes []uuid.UUID) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RestaurantId is the restaurantId argument value.
			RestaurantId uuid.UUID
			// Dishes is the dishes argument value.
			Dishes []uuid.UUID
		}
	}
	lockCheck sync.RWMutex
}

// Check calls CheckFunc.
func (mock *DishOwnershipCheckerMock) Check(ctx context.Context, restaurantId uuid.UUID, dishes []uuid.UUID) (bool, error) {
	if mock.CheckFunc == nil {
		panic("DishOwnershipCheckerMock.CheckFunc: method is nil but DishOwnershipChecker.Check was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RestaurantId uuid.UUID
		Dishes       []uuid.UUID
	}{
		Ctx:          ctx,
		RestaurantId: restaurantId,
		Dishes:       dishes,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(ctx, restaurantId, dishes)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedDishOwnershipChecker.CheckCalls())
func (mock *DishOwnershipCheckerMock) CheckCalls() []struct {
	Ctx          context.Context
	RestaurantId uuid.UUID
	Dishes       []uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		RestaurantId uuid.UUID
		Dishes       []uuid.UUID
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}
