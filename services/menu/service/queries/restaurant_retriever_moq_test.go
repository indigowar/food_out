// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package queries

import (
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that RestaurantRetrieverMock does implement RestaurantRetriever.
// If this is not the case, regenerate this file with moq.
var _ RestaurantRetriever = &RestaurantRetrieverMock{}

// RestaurantRetrieverMock is a mock implementation of RestaurantRetriever.
//
//	func TestSomethingThatUsesRestaurantRetriever(t *testing.T) {
//
//		// make and configure a mocked RestaurantRetriever
//		mockedRestaurantRetriever := &RestaurantRetrieverMock{
//			GetRestaurantsFunc: func(ctx context.Context) ([]uuid.UUID, error) {
//				panic("mock out the GetRestaurants method")
//			},
//		}
//
//		// use mockedRestaurantRetriever in code that requires RestaurantRetriever
//		// and then make assertions.
//
//	}
type RestaurantRetrieverMock struct {
	// GetRestaurantsFunc mocks the GetRestaurants method.
	GetRestaurantsFunc func(ctx context.Context) ([]uuid.UUID, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRestaurants holds details about calls to the GetRestaurants method.
		GetRestaurants []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetRestaurants sync.RWMutex
}

// GetRestaurants calls GetRestaurantsFunc.
func (mock *RestaurantRetrieverMock) GetRestaurants(ctx context.Context) ([]uuid.UUID, error) {
	if mock.GetRestaurantsFunc == nil {
		panic("RestaurantRetrieverMock.GetRestaurantsFunc: method is nil but RestaurantRetriever.GetRestaurants was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRestaurants.Lock()
	mock.calls.GetRestaurants = append(mock.calls.GetRestaurants, callInfo)
	mock.lockGetRestaurants.Unlock()
	return mock.GetRestaurantsFunc(ctx)
}

// GetRestaurantsCalls gets all the calls that were made to GetRestaurants.
// Check the length with:
//
//	len(mockedRestaurantRetriever.GetRestaurantsCalls())
func (mock *RestaurantRetrieverMock) GetRestaurantsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetRestaurants.RLock()
	calls = mock.calls.GetRestaurants
	mock.lockGetRestaurants.RUnlock()
	return calls
}
