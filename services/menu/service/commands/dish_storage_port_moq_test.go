// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package commands

import (
	"context"
	"github.com/google/uuid"
	"github.com/indigowar/food_out/services/menu/domain"
	"sync"
)

// Ensure, that DishStoragePortMock does implement DishStoragePort.
// If this is not the case, regenerate this file with moq.
var _ DishStoragePort = &DishStoragePortMock{}

// DishStoragePortMock is a mock implementation of DishStoragePort.
//
//	func TestSomethingThatUsesDishStoragePort(t *testing.T) {
//
//		// make and configure a mocked DishStoragePort
//		mockedDishStoragePort := &DishStoragePortMock{
//			AddDishFunc: func(ctx context.Context, dish *domain.Dish) error {
//				panic("mock out the AddDish method")
//			},
//			DeleteDishFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteDish method")
//			},
//			GetDishFunc: func(ctx context.Context, id uuid.UUID) (*domain.Dish, error) {
//				panic("mock out the GetDish method")
//			},
//			UpdateDishFunc: func(ctx context.Context, dish *domain.Dish) error {
//				panic("mock out the UpdateDish method")
//			},
//		}
//
//		// use mockedDishStoragePort in code that requires DishStoragePort
//		// and then make assertions.
//
//	}
type DishStoragePortMock struct {
	// AddDishFunc mocks the AddDish method.
	AddDishFunc func(ctx context.Context, dish *domain.Dish) error

	// DeleteDishFunc mocks the DeleteDish method.
	DeleteDishFunc func(ctx context.Context, id uuid.UUID) error

	// GetDishFunc mocks the GetDish method.
	GetDishFunc func(ctx context.Context, id uuid.UUID) (*domain.Dish, error)

	// UpdateDishFunc mocks the UpdateDish method.
	UpdateDishFunc func(ctx context.Context, dish *domain.Dish) error

	// calls tracks calls to the methods.
	calls struct {
		// AddDish holds details about calls to the AddDish method.
		AddDish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dish is the dish argument value.
			Dish *domain.Dish
		}
		// DeleteDish holds details about calls to the DeleteDish method.
		DeleteDish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetDish holds details about calls to the GetDish method.
		GetDish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// UpdateDish holds details about calls to the UpdateDish method.
		UpdateDish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dish is the dish argument value.
			Dish *domain.Dish
		}
	}
	lockAddDish    sync.RWMutex
	lockDeleteDish sync.RWMutex
	lockGetDish    sync.RWMutex
	lockUpdateDish sync.RWMutex
}

// AddDish calls AddDishFunc.
func (mock *DishStoragePortMock) AddDish(ctx context.Context, dish *domain.Dish) error {
	if mock.AddDishFunc == nil {
		panic("DishStoragePortMock.AddDishFunc: method is nil but DishStoragePort.AddDish was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Dish *domain.Dish
	}{
		Ctx:  ctx,
		Dish: dish,
	}
	mock.lockAddDish.Lock()
	mock.calls.AddDish = append(mock.calls.AddDish, callInfo)
	mock.lockAddDish.Unlock()
	return mock.AddDishFunc(ctx, dish)
}

// AddDishCalls gets all the calls that were made to AddDish.
// Check the length with:
//
//	len(mockedDishStoragePort.AddDishCalls())
func (mock *DishStoragePortMock) AddDishCalls() []struct {
	Ctx  context.Context
	Dish *domain.Dish
} {
	var calls []struct {
		Ctx  context.Context
		Dish *domain.Dish
	}
	mock.lockAddDish.RLock()
	calls = mock.calls.AddDish
	mock.lockAddDish.RUnlock()
	return calls
}

// DeleteDish calls DeleteDishFunc.
func (mock *DishStoragePortMock) DeleteDish(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteDishFunc == nil {
		panic("DishStoragePortMock.DeleteDishFunc: method is nil but DishStoragePort.DeleteDish was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteDish.Lock()
	mock.calls.DeleteDish = append(mock.calls.DeleteDish, callInfo)
	mock.lockDeleteDish.Unlock()
	return mock.DeleteDishFunc(ctx, id)
}

// DeleteDishCalls gets all the calls that were made to DeleteDish.
// Check the length with:
//
//	len(mockedDishStoragePort.DeleteDishCalls())
func (mock *DishStoragePortMock) DeleteDishCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteDish.RLock()
	calls = mock.calls.DeleteDish
	mock.lockDeleteDish.RUnlock()
	return calls
}

// GetDish calls GetDishFunc.
func (mock *DishStoragePortMock) GetDish(ctx context.Context, id uuid.UUID) (*domain.Dish, error) {
	if mock.GetDishFunc == nil {
		panic("DishStoragePortMock.GetDishFunc: method is nil but DishStoragePort.GetDish was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDish.Lock()
	mock.calls.GetDish = append(mock.calls.GetDish, callInfo)
	mock.lockGetDish.Unlock()
	return mock.GetDishFunc(ctx, id)
}

// GetDishCalls gets all the calls that were made to GetDish.
// Check the length with:
//
//	len(mockedDishStoragePort.GetDishCalls())
func (mock *DishStoragePortMock) GetDishCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetDish.RLock()
	calls = mock.calls.GetDish
	mock.lockGetDish.RUnlock()
	return calls
}

// UpdateDish calls UpdateDishFunc.
func (mock *DishStoragePortMock) UpdateDish(ctx context.Context, dish *domain.Dish) error {
	if mock.UpdateDishFunc == nil {
		panic("DishStoragePortMock.UpdateDishFunc: method is nil but DishStoragePort.UpdateDish was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Dish *domain.Dish
	}{
		Ctx:  ctx,
		Dish: dish,
	}
	mock.lockUpdateDish.Lock()
	mock.calls.UpdateDish = append(mock.calls.UpdateDish, callInfo)
	mock.lockUpdateDish.Unlock()
	return mock.UpdateDishFunc(ctx, dish)
}

// UpdateDishCalls gets all the calls that were made to UpdateDish.
// Check the length with:
//
//	len(mockedDishStoragePort.UpdateDishCalls())
func (mock *DishStoragePortMock) UpdateDishCalls() []struct {
	Ctx  context.Context
	Dish *domain.Dish
} {
	var calls []struct {
		Ctx  context.Context
		Dish *domain.Dish
	}
	mock.lockUpdateDish.RLock()
	calls = mock.calls.UpdateDish
	mock.lockUpdateDish.RUnlock()
	return calls
}
