// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package commands

import (
	"context"
	"github.com/indigowar/services/orders/models"
	"sync"
)

// Ensure, that OrderEndedProducerMock does implement OrderEndedProducer.
// If this is not the case, regenerate this file with moq.
var _ OrderEndedProducer = &OrderEndedProducerMock{}

// OrderEndedProducerMock is a mock implementation of OrderEndedProducer.
//
//	func TestSomethingThatUsesOrderEndedProducer(t *testing.T) {
//
//		// make and configure a mocked OrderEndedProducer
//		mockedOrderEndedProducer := &OrderEndedProducerMock{
//			ProduceFunc: func(ctx context.Context, order models.Order) error {
//				panic("mock out the Produce method")
//			},
//		}
//
//		// use mockedOrderEndedProducer in code that requires OrderEndedProducer
//		// and then make assertions.
//
//	}
type OrderEndedProducerMock struct {
	// ProduceFunc mocks the Produce method.
	ProduceFunc func(ctx context.Context, order models.Order) error

	// calls tracks calls to the methods.
	calls struct {
		// Produce holds details about calls to the Produce method.
		Produce []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order models.Order
		}
	}
	lockProduce sync.RWMutex
}

// Produce calls ProduceFunc.
func (mock *OrderEndedProducerMock) Produce(ctx context.Context, order models.Order) error {
	if mock.ProduceFunc == nil {
		panic("OrderEndedProducerMock.ProduceFunc: method is nil but OrderEndedProducer.Produce was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Order models.Order
	}{
		Ctx:   ctx,
		Order: order,
	}
	mock.lockProduce.Lock()
	mock.calls.Produce = append(mock.calls.Produce, callInfo)
	mock.lockProduce.Unlock()
	return mock.ProduceFunc(ctx, order)
}

// ProduceCalls gets all the calls that were made to Produce.
// Check the length with:
//
//	len(mockedOrderEndedProducer.ProduceCalls())
func (mock *OrderEndedProducerMock) ProduceCalls() []struct {
	Ctx   context.Context
	Order models.Order
} {
	var calls []struct {
		Ctx   context.Context
		Order models.Order
	}
	mock.lockProduce.RLock()
	calls = mock.calls.Produce
	mock.lockProduce.RUnlock()
	return calls
}
