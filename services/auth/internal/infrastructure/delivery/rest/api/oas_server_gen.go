// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// LogIn implements LogIn operation.
	//
	// Log into account and create a session.
	//
	// POST /login
	LogIn(ctx context.Context, req *Credentials) (LogInRes, error)
	// LogoutFromSession implements LogoutFromSession operation.
	//
	// Log out from the account using refresh token.
	//
	// POST /logout
	LogoutFromSession(ctx context.Context) (LogoutFromSessionRes, error)
	// RefreshAccessToken implements RefreshAccessToken operation.
	//
	// Create a new access token using refresh token.
	//
	// POST /access
	RefreshAccessToken(ctx context.Context) (RefreshAccessTokenRes, error)
	// RefreshPair implements RefreshPair operation.
	//
	// Refresh pair of tokens using refresh token.
	//
	// POST /refresh
	RefreshPair(ctx context.Context) (RefreshPairRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
