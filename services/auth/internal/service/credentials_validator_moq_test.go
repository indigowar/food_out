// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that CredentialsValidatorMock does implement CredentialsValidator.
// If this is not the case, regenerate this file with moq.
var _ CredentialsValidator = &CredentialsValidatorMock{}

// CredentialsValidatorMock is a mock implementation of CredentialsValidator.
//
//	func TestSomethingThatUsesCredentialsValidator(t *testing.T) {
//
//		// make and configure a mocked CredentialsValidator
//		mockedCredentialsValidator := &CredentialsValidatorMock{
//			ValidateFunc: func(ctx context.Context, phone string, password string) (uuid.UUID, error) {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedCredentialsValidator in code that requires CredentialsValidator
//		// and then make assertions.
//
//	}
type CredentialsValidatorMock struct {
	// ValidateFunc mocks the Validate method.
	ValidateFunc func(ctx context.Context, phone string, password string) (uuid.UUID, error)

	// calls tracks calls to the methods.
	calls struct {
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Phone is the phone argument value.
			Phone string
			// Password is the password argument value.
			Password string
		}
	}
	lockValidate sync.RWMutex
}

// Validate calls ValidateFunc.
func (mock *CredentialsValidatorMock) Validate(ctx context.Context, phone string, password string) (uuid.UUID, error) {
	if mock.ValidateFunc == nil {
		panic("CredentialsValidatorMock.ValidateFunc: method is nil but CredentialsValidator.Validate was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Phone    string
		Password string
	}{
		Ctx:      ctx,
		Phone:    phone,
		Password: password,
	}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc(ctx, phone, password)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedCredentialsValidator.ValidateCalls())
func (mock *CredentialsValidatorMock) ValidateCalls() []struct {
	Ctx      context.Context
	Phone    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Phone    string
		Password string
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
