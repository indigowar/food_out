// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/google/uuid"
	"github.com/indigowar/food_out/services/auth/internal/domain"
	"sync"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked Storage
//		mockedStorage := &StorageMock{
//			AddFunc: func(ctx context.Context, session domain.Session) error {
//				panic("mock out the Add method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (domain.Session, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByTokenFunc: func(ctx context.Context, token domain.SessionToken) (domain.Session, error) {
//				panic("mock out the GetByToken method")
//			},
//			RemoveByIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the RemoveByID method")
//			},
//			RemoveByTokenFunc: func(ctx context.Context, token domain.SessionToken) error {
//				panic("mock out the RemoveByToken method")
//			},
//		}
//
//		// use mockedStorage in code that requires Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, session domain.Session) error

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (domain.Session, error)

	// GetByTokenFunc mocks the GetByToken method.
	GetByTokenFunc func(ctx context.Context, token domain.SessionToken) (domain.Session, error)

	// RemoveByIDFunc mocks the RemoveByID method.
	RemoveByIDFunc func(ctx context.Context, id uuid.UUID) error

	// RemoveByTokenFunc mocks the RemoveByToken method.
	RemoveByTokenFunc func(ctx context.Context, token domain.SessionToken) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Session is the session argument value.
			Session domain.Session
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetByToken holds details about calls to the GetByToken method.
		GetByToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token domain.SessionToken
		}
		// RemoveByID holds details about calls to the RemoveByID method.
		RemoveByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// RemoveByToken holds details about calls to the RemoveByToken method.
		RemoveByToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token domain.SessionToken
		}
	}
	lockAdd           sync.RWMutex
	lockGetByID       sync.RWMutex
	lockGetByToken    sync.RWMutex
	lockRemoveByID    sync.RWMutex
	lockRemoveByToken sync.RWMutex
}

// Add calls AddFunc.
func (mock *StorageMock) Add(ctx context.Context, session domain.Session) error {
	if mock.AddFunc == nil {
		panic("StorageMock.AddFunc: method is nil but Storage.Add was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Session domain.Session
	}{
		Ctx:     ctx,
		Session: session,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, session)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedStorage.AddCalls())
func (mock *StorageMock) AddCalls() []struct {
	Ctx     context.Context
	Session domain.Session
} {
	var calls []struct {
		Ctx     context.Context
		Session domain.Session
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *StorageMock) GetByID(ctx context.Context, id uuid.UUID) (domain.Session, error) {
	if mock.GetByIDFunc == nil {
		panic("StorageMock.GetByIDFunc: method is nil but Storage.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedStorage.GetByIDCalls())
func (mock *StorageMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByToken calls GetByTokenFunc.
func (mock *StorageMock) GetByToken(ctx context.Context, token domain.SessionToken) (domain.Session, error) {
	if mock.GetByTokenFunc == nil {
		panic("StorageMock.GetByTokenFunc: method is nil but Storage.GetByToken was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token domain.SessionToken
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockGetByToken.Lock()
	mock.calls.GetByToken = append(mock.calls.GetByToken, callInfo)
	mock.lockGetByToken.Unlock()
	return mock.GetByTokenFunc(ctx, token)
}

// GetByTokenCalls gets all the calls that were made to GetByToken.
// Check the length with:
//
//	len(mockedStorage.GetByTokenCalls())
func (mock *StorageMock) GetByTokenCalls() []struct {
	Ctx   context.Context
	Token domain.SessionToken
} {
	var calls []struct {
		Ctx   context.Context
		Token domain.SessionToken
	}
	mock.lockGetByToken.RLock()
	calls = mock.calls.GetByToken
	mock.lockGetByToken.RUnlock()
	return calls
}

// RemoveByID calls RemoveByIDFunc.
func (mock *StorageMock) RemoveByID(ctx context.Context, id uuid.UUID) error {
	if mock.RemoveByIDFunc == nil {
		panic("StorageMock.RemoveByIDFunc: method is nil but Storage.RemoveByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemoveByID.Lock()
	mock.calls.RemoveByID = append(mock.calls.RemoveByID, callInfo)
	mock.lockRemoveByID.Unlock()
	return mock.RemoveByIDFunc(ctx, id)
}

// RemoveByIDCalls gets all the calls that were made to RemoveByID.
// Check the length with:
//
//	len(mockedStorage.RemoveByIDCalls())
func (mock *StorageMock) RemoveByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockRemoveByID.RLock()
	calls = mock.calls.RemoveByID
	mock.lockRemoveByID.RUnlock()
	return calls
}

// RemoveByToken calls RemoveByTokenFunc.
func (mock *StorageMock) RemoveByToken(ctx context.Context, token domain.SessionToken) error {
	if mock.RemoveByTokenFunc == nil {
		panic("StorageMock.RemoveByTokenFunc: method is nil but Storage.RemoveByToken was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token domain.SessionToken
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockRemoveByToken.Lock()
	mock.calls.RemoveByToken = append(mock.calls.RemoveByToken, callInfo)
	mock.lockRemoveByToken.Unlock()
	return mock.RemoveByTokenFunc(ctx, token)
}

// RemoveByTokenCalls gets all the calls that were made to RemoveByToken.
// Check the length with:
//
//	len(mockedStorage.RemoveByTokenCalls())
func (mock *StorageMock) RemoveByTokenCalls() []struct {
	Ctx   context.Context
	Token domain.SessionToken
} {
	var calls []struct {
		Ctx   context.Context
		Token domain.SessionToken
	}
	mock.lockRemoveByToken.RLock()
	calls = mock.calls.RemoveByToken
	mock.lockRemoveByToken.RUnlock()
	return calls
}
