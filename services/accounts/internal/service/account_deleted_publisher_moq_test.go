// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that AccountDeletedPublisherMock does implement AccountDeletedPublisher.
// If this is not the case, regenerate this file with moq.
var _ AccountDeletedPublisher = &AccountDeletedPublisherMock{}

// AccountDeletedPublisherMock is a mock implementation of AccountDeletedPublisher.
//
//	func TestSomethingThatUsesAccountDeletedPublisher(t *testing.T) {
//
//		// make and configure a mocked AccountDeletedPublisher
//		mockedAccountDeletedPublisher := &AccountDeletedPublisherMock{
//			PublishAccountDeletedFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the PublishAccountDeleted method")
//			},
//		}
//
//		// use mockedAccountDeletedPublisher in code that requires AccountDeletedPublisher
//		// and then make assertions.
//
//	}
type AccountDeletedPublisherMock struct {
	// PublishAccountDeletedFunc mocks the PublishAccountDeleted method.
	PublishAccountDeletedFunc func(ctx context.Context, id uuid.UUID) error

	// calls tracks calls to the methods.
	calls struct {
		// PublishAccountDeleted holds details about calls to the PublishAccountDeleted method.
		PublishAccountDeleted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
	}
	lockPublishAccountDeleted sync.RWMutex
}

// PublishAccountDeleted calls PublishAccountDeletedFunc.
func (mock *AccountDeletedPublisherMock) PublishAccountDeleted(ctx context.Context, id uuid.UUID) error {
	if mock.PublishAccountDeletedFunc == nil {
		panic("AccountDeletedPublisherMock.PublishAccountDeletedFunc: method is nil but AccountDeletedPublisher.PublishAccountDeleted was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockPublishAccountDeleted.Lock()
	mock.calls.PublishAccountDeleted = append(mock.calls.PublishAccountDeleted, callInfo)
	mock.lockPublishAccountDeleted.Unlock()
	return mock.PublishAccountDeletedFunc(ctx, id)
}

// PublishAccountDeletedCalls gets all the calls that were made to PublishAccountDeleted.
// Check the length with:
//
//	len(mockedAccountDeletedPublisher.PublishAccountDeletedCalls())
func (mock *AccountDeletedPublisherMock) PublishAccountDeletedCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockPublishAccountDeleted.RLock()
	calls = mock.calls.PublishAccountDeleted
	mock.lockPublishAccountDeleted.RUnlock()
	return calls
}
