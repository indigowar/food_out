// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1::uuid
`

func (q *Queries) DeleteAccount(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, phone, password, name, profile_picture FROM accounts WHERE id = $1::uuid
`

func (q *Queries) GetAccountByID(ctx context.Context, id pgtype.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Password,
		&i.Name,
		&i.ProfilePicture,
	)
	return i, err
}

const getAccountByPhone = `-- name: GetAccountByPhone :one
SELECT id, phone, password, name, profile_picture FROM accounts WHERE phone = $1::text
`

func (q *Queries) GetAccountByPhone(ctx context.Context, phone string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByPhone, phone)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Password,
		&i.Name,
		&i.ProfilePicture,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT id, phone, password, name, profile_picture FROM accounts
`

func (q *Queries) GetAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Phone,
			&i.Password,
			&i.Name,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAccount = `-- name: InsertAccount :exec
INSERT INTO accounts (id, phone, password, name, profile_picture)
VALUES (
    $1::uuid,
    $2::text,
    $3::text,
    $4,
    $5
)
`

type InsertAccountParams struct {
	ID             pgtype.UUID
	Phone          string
	Password       string
	Name           pgtype.Text
	ProfilePicture pgtype.Text
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) error {
	_, err := q.db.Exec(ctx, insertAccount,
		arg.ID,
		arg.Phone,
		arg.Password,
		arg.Name,
		arg.ProfilePicture,
	)
	return err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
    SET
        phone = $1::text,
        password = $2::text,
        name = $3::text,
        profile_picture = $4::text
    WHERE id = $5::uuid
`

type UpdateAccountParams struct {
	Phone          string
	Password       string
	Name           pgtype.Text
	ProfilePicture pgtype.Text
	ID             pgtype.UUID
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount,
		arg.Phone,
		arg.Password,
		arg.Name,
		arg.ProfilePicture,
		arg.ID,
	)
	return err
}
